/* Auto-generated by genmsg_cpp for file /home/danpierce/devel/ublox_test_ws/src/ublox/ublox_msgs/msg/RxmSVSI_SV.msg */
#ifndef UBLOX_MSGS_MESSAGE_RXMSVSI_SV_H
#define UBLOX_MSGS_MESSAGE_RXMSVSI_SV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ublox_msgs
{
template <class ContainerAllocator>
struct RxmSVSI_SV_ {
  typedef RxmSVSI_SV_<ContainerAllocator> Type;

  RxmSVSI_SV_()
  : svid(0)
  , svFlag(0)
  , azi(0)
  , elev(0)
  , age(0)
  {
  }

  RxmSVSI_SV_(const ContainerAllocator& _alloc)
  : svid(0)
  , svFlag(0)
  , azi(0)
  , elev(0)
  , age(0)
  {
  }

  typedef uint8_t _svid_type;
  uint8_t svid;

  typedef uint8_t _svFlag_type;
  uint8_t svFlag;

  typedef int16_t _azi_type;
  int16_t azi;

  typedef int8_t _elev_type;
  int8_t elev;

  typedef uint8_t _age_type;
  uint8_t age;

  enum { FLAG_URA_MASK = 15 };
  enum { FLAG_HEALTHY = 16 };
  enum { FLAG_EPH_VAL = 32 };
  enum { FLAG_ALM_VAL = 64 };
  enum { FLAG_NOT_AVAIL = 128 };
  enum { AGE_ALM_MASK = 15 };
  enum { AGE_EPH_MASK = 240 };

  typedef boost::shared_ptr< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RxmSVSI_SV
typedef  ::ublox_msgs::RxmSVSI_SV_<std::allocator<void> > RxmSVSI_SV;

typedef boost::shared_ptr< ::ublox_msgs::RxmSVSI_SV> RxmSVSI_SVPtr;
typedef boost::shared_ptr< ::ublox_msgs::RxmSVSI_SV const> RxmSVSI_SVConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b58fccf5178b8e0d3921f5737e017cc6";
  }

  static const char* value(const  ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb58fccf5178b8e0dULL;
  static const uint64_t static_value2 = 0x3921f5737e017cc6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ublox_msgs/RxmSVSI_SV";
  }

  static const char* value(const  ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# see message RxmSVSI\n\
#\n\
\n\
uint8 svid            # Satellite ID\n\
\n\
uint8 svFlag          # Information Flags\n\
uint8 FLAG_URA_MASK = 15      # Figure of Merit (URA) range 0..15\n\
uint8 FLAG_HEALTHY = 16       # SV healthy flag\n\
uint8 FLAG_EPH_VAL = 32       # Ephemeris valid\n\
uint8 FLAG_ALM_VAL = 64       # Almanach valid\n\
uint8 FLAG_NOT_AVAIL = 128    # SV not available\n\
\n\
int16 azi             # Azimuth\n\
int8 elev             # Elevation\n\
\n\
uint8 age             # Age of Almanach and Ephemeris\n\
uint8 AGE_ALM_MASK = 15       # Age of ALM in days offset by 4\n\
                              # i.e. the reference time may be in the future:\n\
                              # ageOfAlm = (age & 0x0f) - 4\n\
uint8 AGE_EPH_MASK = 240      # Age of EPH in hours offset by 4.\n\
                              # i.e. the reference time may be in the future:\n\
                              # ageOfEph = ((age & 0xf0) >> 4) - 4\n\
\n\
";
  }

  static const char* value(const  ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.svid);
    stream.next(m.svFlag);
    stream.next(m.azi);
    stream.next(m.elev);
    stream.next(m.age);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RxmSVSI_SV_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> & v) 
  {
    s << indent << "svid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.svid);
    s << indent << "svFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.svFlag);
    s << indent << "azi: ";
    Printer<int16_t>::stream(s, indent + "  ", v.azi);
    s << indent << "elev: ";
    Printer<int8_t>::stream(s, indent + "  ", v.elev);
    s << indent << "age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.age);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_RXMSVSI_SV_H

