/* Auto-generated by genmsg_cpp for file /home/danpierce/devel/ublox_test_ws/src/ublox/ublox_msgs/msg/NavSTATUS.msg */
#ifndef UBLOX_MSGS_MESSAGE_NAVSTATUS_H
#define UBLOX_MSGS_MESSAGE_NAVSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ublox_msgs
{
template <class ContainerAllocator>
struct NavSTATUS_ {
  typedef NavSTATUS_<ContainerAllocator> Type;

  NavSTATUS_()
  : iTOW(0)
  , gpsFix(0)
  , flags(0)
  , fixStat(0)
  , flags2(0)
  , ttff(0)
  , msss(0)
  {
  }

  NavSTATUS_(const ContainerAllocator& _alloc)
  : iTOW(0)
  , gpsFix(0)
  , flags(0)
  , fixStat(0)
  , flags2(0)
  , ttff(0)
  , msss(0)
  {
  }

  typedef uint32_t _iTOW_type;
  uint32_t iTOW;

  typedef uint8_t _gpsFix_type;
  uint8_t gpsFix;

  typedef uint8_t _flags_type;
  uint8_t flags;

  typedef uint8_t _fixStat_type;
  uint8_t fixStat;

  typedef uint8_t _flags2_type;
  uint8_t flags2;

  typedef uint32_t _ttff_type;
  uint32_t ttff;

  typedef uint32_t _msss_type;
  uint32_t msss;

  enum { CLASS_ID = 1 };
  enum { MESSAGE_ID = 3 };
  enum { GPS_NO_FIX = 0 };
  enum { GPS_DEAD_RECKONING_ONLY = 1 };
  enum { GPS_2D_FIX = 2 };
  enum { GPS_3D_FIX = 3 };
  enum { GPS_GPS_DEAD_RECKONING_COMBINED = 4 };
  enum { GPS_TIME_ONLY_FIX = 6 };
  enum { FLAGS_GPSFIXOK = 1 };
  enum { FLAGS_DIFFSOLN = 2 };
  enum { FLAGS_WKNSET = 4 };
  enum { FLAGS_TOWSET = 8 };
  enum { DGPSISTAT_MASK = 1 };
  enum { DGPSISTAT_NONE = 0 };
  enum { DGPSISTAT_PR_PRR = 1 };
  enum { MAPMATCHING_MASK = 192 };
  enum { MAPMATCHING_NONE = 0 };
  enum { MAPMATCHING_VALID = 64 };
  enum { MAPMATCHING_USED = 128 };
  enum { MAPMATCHING_DR = 192 };
  enum { PSMSTATE_ACQUISITION = 0 };
  enum { PSMSTATE_TRACKING = 1 };
  enum { PSMSTATE_POWER_OPTIMIZED_TRACKING = 2 };
  enum { PSMSTATE_INACTIVE = 3 };

  typedef boost::shared_ptr< ::ublox_msgs::NavSTATUS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::NavSTATUS_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NavSTATUS
typedef  ::ublox_msgs::NavSTATUS_<std::allocator<void> > NavSTATUS;

typedef boost::shared_ptr< ::ublox_msgs::NavSTATUS> NavSTATUSPtr;
typedef boost::shared_ptr< ::ublox_msgs::NavSTATUS const> NavSTATUSConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ublox_msgs::NavSTATUS_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ublox_msgs::NavSTATUS_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::NavSTATUS_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::NavSTATUS_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::NavSTATUS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c59712aa2e07ac37df60d9b92f97d104";
  }

  static const char* value(const  ::ublox_msgs::NavSTATUS_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc59712aa2e07ac37ULL;
  static const uint64_t static_value2 = 0xdf60d9b92f97d104ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::NavSTATUS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ublox_msgs/NavSTATUS";
  }

  static const char* value(const  ::ublox_msgs::NavSTATUS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::NavSTATUS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# NAV-STATUS (0x01 0x03)\n\
# Receiver Navigation Status\n\
#\n\
# See important comments concerning validity of position and velocity given in\n\
# section Navigation Output Filters.\n\
#\n\
\n\
uint8 CLASS_ID = 1\n\
uint8 MESSAGE_ID = 3\n\
\n\
uint32 iTOW             # GPS Millisecond time of week [ms]\n\
\n\
uint8 gpsFix            # GPSfix Type, range 0..5\n\
uint8 GPS_NO_FIX = 0\n\
uint8 GPS_DEAD_RECKONING_ONLY = 1\n\
uint8 GPS_2D_FIX = 2\n\
uint8 GPS_3D_FIX = 3\n\
uint8 GPS_GPS_DEAD_RECKONING_COMBINED = 4\n\
uint8 GPS_TIME_ONLY_FIX = 6\n\
\n\
uint8 flags             # Navigation Status Flags\n\
uint8 FLAGS_GPSFIXOK = 1      # i.e. within DOP & ACC Masks\n\
uint8 FLAGS_DIFFSOLN = 2      # DGPS used\n\
uint8 FLAGS_WKNSET = 4        # Week Number valid\n\
uint8 FLAGS_TOWSET = 8        # Time of Week valid\n\
\n\
uint8 fixStat           # Fix Status Information\n\
# DGPS Input Status:\n\
uint8 DGPSISTAT_MASK = 1\n\
uint8 DGPSISTAT_NONE = 0        # none\n\
uint8 DGPSISTAT_PR_PRR = 1      # PR+PRR Correction\n\
# map matching status:\n\
uint8 MAPMATCHING_MASK = 192\n\
uint8 MAPMATCHING_NONE = 0      # none\n\
uint8 MAPMATCHING_VALID = 64    # valid, i.e. map matching data was received, but was too old\n\
uint8 MAPMATCHING_USED = 128    # used, map matching data was applied\n\
uint8 MAPMATCHING_DR = 192      # DR, map matching was the reason to enable the dead reckoning gpsFix type instead of publishing no fix\n\
\n\
uint8 flags2            # further information about navigation output\n\
# power safe mode state (Only for FW version >= 7.01; undefined otherwise)\n\
uint8 PSMSTATE_ACQUISITION = 0                # ACQUISITION [or when psm disabled]\n\
uint8 PSMSTATE_TRACKING = 1                   # TRACKING\n\
uint8 PSMSTATE_POWER_OPTIMIZED_TRACKING = 2   # POWER OPTIMIZED TRACKING\n\
uint8 PSMSTATE_INACTIVE = 3                   # INACTIVE\n\
\n\
uint32 ttff             # Time to first fix (millisecond time tag)\n\
uint32 msss             # Milliseconds since Startup / Reset\n\
\n\
";
  }

  static const char* value(const  ::ublox_msgs::NavSTATUS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ublox_msgs::NavSTATUS_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ublox_msgs::NavSTATUS_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.iTOW);
    stream.next(m.gpsFix);
    stream.next(m.flags);
    stream.next(m.fixStat);
    stream.next(m.flags2);
    stream.next(m.ttff);
    stream.next(m.msss);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NavSTATUS_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::NavSTATUS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ublox_msgs::NavSTATUS_<ContainerAllocator> & v) 
  {
    s << indent << "iTOW: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.iTOW);
    s << indent << "gpsFix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gpsFix);
    s << indent << "flags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flags);
    s << indent << "fixStat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fixStat);
    s << indent << "flags2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flags2);
    s << indent << "ttff: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ttff);
    s << indent << "msss: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msss);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_NAVSTATUS_H

