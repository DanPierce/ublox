/* Auto-generated by genmsg_cpp for file /home/danpierce/devel/ublox_test_ws/src/ublox/ublox_msgs/msg/CfgANT.msg */
#ifndef UBLOX_MSGS_MESSAGE_CFGANT_H
#define UBLOX_MSGS_MESSAGE_CFGANT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ublox_msgs
{
template <class ContainerAllocator>
struct CfgANT_ {
  typedef CfgANT_<ContainerAllocator> Type;

  CfgANT_()
  : flags(0)
  , pins(0)
  {
  }

  CfgANT_(const ContainerAllocator& _alloc)
  : flags(0)
  , pins(0)
  {
  }

  typedef uint16_t _flags_type;
  uint16_t flags;

  typedef uint16_t _pins_type;
  uint16_t pins;

  enum { CLASS_ID = 6 };
  enum { MESSAGE_ID = 19 };
  enum { FLAGS_SVCS = 1 };
  enum { FLAGS_SCD = 2 };
  enum { FLAGS_OCD = 4 };
  enum { FLAGS_PDWN_ON_SCD = 8 };
  enum { FLAGS_RECOVERY = 16 };
  enum { PIN_SWITCH_MASK = 31 };
  enum { PIN_SCD_MASK = 992 };
  enum { PIN_OCD_MASK = 31744 };
  enum { PIN_RECONFIG = 16384 };

  typedef boost::shared_ptr< ::ublox_msgs::CfgANT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::CfgANT_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CfgANT
typedef  ::ublox_msgs::CfgANT_<std::allocator<void> > CfgANT;

typedef boost::shared_ptr< ::ublox_msgs::CfgANT> CfgANTPtr;
typedef boost::shared_ptr< ::ublox_msgs::CfgANT const> CfgANTConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ublox_msgs::CfgANT_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ublox_msgs::CfgANT_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::CfgANT_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::CfgANT_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::CfgANT_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9e3add3a4d57d340f23eecf447a5c89e";
  }

  static const char* value(const  ::ublox_msgs::CfgANT_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9e3add3a4d57d340ULL;
  static const uint64_t static_value2 = 0xf23eecf447a5c89eULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::CfgANT_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ublox_msgs/CfgANT";
  }

  static const char* value(const  ::ublox_msgs::CfgANT_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::CfgANT_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# CFG-ANT (0x06 0x13)\n\
# Antenna Control Settings\n\
#\n\
\n\
uint8 CLASS_ID = 6\n\
uint8 MESSAGE_ID = 19\n\
\n\
uint16 flags            # Antenna Flag Mask\n\
uint16 FLAGS_SVCS = 1         # Enable Antenna Supply Voltage Control Signal\n\
uint16 FLAGS_SCD = 2          # Enable Short Circuit Detection\n\
uint16 FLAGS_OCD = 4          # Enable Open Circuit Detection\n\
uint16 FLAGS_PDWN_ON_SCD = 8  # Power Down Antenna supply if Short Circuit is detected. (only in combination with Bit 1)\n\
uint16 FLAGS_RECOVERY = 16    # Enable automatic recovery from short state\n\
\n\
uint16 pins             # Antenna Pin Configuration\n\
uint16 PIN_SWITCH_MASK = 31    # PIO-Pin used for switching antenna supply (internal to TIM-LP/TIM-LF)\n\
uint16 PIN_SCD_MASK = 992      # PIO-Pin used for detecting a short in the antenna supply\n\
uint16 PIN_OCD_MASK = 31744    # PIO-Pin used for detecting open/not connected antenna\n\
uint16 PIN_RECONFIG = 16384    # if set to one, and this command is sent to the receiver, the receiver will reconfigure the pins as specified.\n\
\n\
";
  }

  static const char* value(const  ::ublox_msgs::CfgANT_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ublox_msgs::CfgANT_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ublox_msgs::CfgANT_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.flags);
    stream.next(m.pins);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CfgANT_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::CfgANT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ublox_msgs::CfgANT_<ContainerAllocator> & v) 
  {
    s << indent << "flags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.flags);
    s << indent << "pins: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pins);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_CFGANT_H

