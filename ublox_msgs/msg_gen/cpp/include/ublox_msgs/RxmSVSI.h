/* Auto-generated by genmsg_cpp for file /home/danpierce/devel/ublox_test_ws/src/ublox/ublox_msgs/msg/RxmSVSI.msg */
#ifndef UBLOX_MSGS_MESSAGE_RXMSVSI_H
#define UBLOX_MSGS_MESSAGE_RXMSVSI_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ublox_msgs/RxmSVSI_SV.h"

namespace ublox_msgs
{
template <class ContainerAllocator>
struct RxmSVSI_ {
  typedef RxmSVSI_<ContainerAllocator> Type;

  RxmSVSI_()
  : iTOW(0)
  , week(0)
  , numVis(0)
  , numSV(0)
  , sv()
  {
  }

  RxmSVSI_(const ContainerAllocator& _alloc)
  : iTOW(0)
  , week(0)
  , numVis(0)
  , numSV(0)
  , sv(_alloc)
  {
  }

  typedef int32_t _iTOW_type;
  int32_t iTOW;

  typedef int16_t _week_type;
  int16_t week;

  typedef uint8_t _numVis_type;
  uint8_t numVis;

  typedef uint8_t _numSV_type;
  uint8_t numSV;

  typedef std::vector< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> >::other >  _sv_type;
  std::vector< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> >::other >  sv;

  enum { CLASS_ID = 2 };
  enum { MESSAGE_ID = 32 };

  typedef boost::shared_ptr< ::ublox_msgs::RxmSVSI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::RxmSVSI_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RxmSVSI
typedef  ::ublox_msgs::RxmSVSI_<std::allocator<void> > RxmSVSI;

typedef boost::shared_ptr< ::ublox_msgs::RxmSVSI> RxmSVSIPtr;
typedef boost::shared_ptr< ::ublox_msgs::RxmSVSI const> RxmSVSIConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ublox_msgs::RxmSVSI_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ublox_msgs::RxmSVSI_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::RxmSVSI_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::RxmSVSI_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::RxmSVSI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "98aa3a36683a81726f4382ea8e0b7c1b";
  }

  static const char* value(const  ::ublox_msgs::RxmSVSI_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x98aa3a36683a8172ULL;
  static const uint64_t static_value2 = 0x6f4382ea8e0b7c1bULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::RxmSVSI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ublox_msgs/RxmSVSI";
  }

  static const char* value(const  ::ublox_msgs::RxmSVSI_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::RxmSVSI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# RXM-SVSI (0x02 0x20)\n\
# SV Status Info\n\
#\n\
# Status of the receiver manager knowledge about GPS Orbit Validity\n\
#\n\
\n\
uint8 CLASS_ID = 2\n\
uint8 MESSAGE_ID = 32\n\
\n\
int32 iTOW              # Measurement integer millisecond GPS time of week [ms]\n\
int16 week              # Measurement GPS week number [weeks]\n\
\n\
uint8 numVis            # Number of visible satellites\n\
uint8 numSV             # Number of per-SV data blocks following\n\
\n\
RxmSVSI_SV[] sv\n\
\n\
================================================================================\n\
MSG: ublox_msgs/RxmSVSI_SV\n\
# see message RxmSVSI\n\
#\n\
\n\
uint8 svid            # Satellite ID\n\
\n\
uint8 svFlag          # Information Flags\n\
uint8 FLAG_URA_MASK = 15      # Figure of Merit (URA) range 0..15\n\
uint8 FLAG_HEALTHY = 16       # SV healthy flag\n\
uint8 FLAG_EPH_VAL = 32       # Ephemeris valid\n\
uint8 FLAG_ALM_VAL = 64       # Almanach valid\n\
uint8 FLAG_NOT_AVAIL = 128    # SV not available\n\
\n\
int16 azi             # Azimuth\n\
int8 elev             # Elevation\n\
\n\
uint8 age             # Age of Almanach and Ephemeris\n\
uint8 AGE_ALM_MASK = 15       # Age of ALM in days offset by 4\n\
                              # i.e. the reference time may be in the future:\n\
                              # ageOfAlm = (age & 0x0f) - 4\n\
uint8 AGE_EPH_MASK = 240      # Age of EPH in hours offset by 4.\n\
                              # i.e. the reference time may be in the future:\n\
                              # ageOfEph = ((age & 0xf0) >> 4) - 4\n\
\n\
";
  }

  static const char* value(const  ::ublox_msgs::RxmSVSI_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ublox_msgs::RxmSVSI_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.iTOW);
    stream.next(m.week);
    stream.next(m.numVis);
    stream.next(m.numSV);
    stream.next(m.sv);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RxmSVSI_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::RxmSVSI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ublox_msgs::RxmSVSI_<ContainerAllocator> & v) 
  {
    s << indent << "iTOW: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iTOW);
    s << indent << "week: ";
    Printer<int16_t>::stream(s, indent + "  ", v.week);
    s << indent << "numVis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.numVis);
    s << indent << "numSV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.numSV);
    s << indent << "sv[]" << std::endl;
    for (size_t i = 0; i < v.sv.size(); ++i)
    {
      s << indent << "  sv[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ublox_msgs::RxmSVSI_SV_<ContainerAllocator> >::stream(s, indent + "    ", v.sv[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_RXMSVSI_H

