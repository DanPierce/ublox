/* Auto-generated by genmsg_cpp for file /home/danpierce/devel/ublox_test_ws/src/ublox/ublox_msgs/msg/NavDGPS_SV.msg */
#ifndef UBLOX_MSGS_MESSAGE_NAVDGPS_SV_H
#define UBLOX_MSGS_MESSAGE_NAVDGPS_SV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ublox_msgs
{
template <class ContainerAllocator>
struct NavDGPS_SV_ {
  typedef NavDGPS_SV_<ContainerAllocator> Type;

  NavDGPS_SV_()
  : svid(0)
  , flags(0)
  , ageC(0)
  , prc(0.0)
  , prrc(0.0)
  {
  }

  NavDGPS_SV_(const ContainerAllocator& _alloc)
  : svid(0)
  , flags(0)
  , ageC(0)
  , prc(0.0)
  , prrc(0.0)
  {
  }

  typedef uint8_t _svid_type;
  uint8_t svid;

  typedef uint8_t _flags_type;
  uint8_t flags;

  typedef uint16_t _ageC_type;
  uint16_t ageC;

  typedef float _prc_type;
  float prc;

  typedef float _prrc_type;
  float prrc;

  enum { CHANNEL1 = 1 };
  enum { CHANNEL2 = 2 };
  enum { CHANNEL3 = 3 };
  enum { CHANNEL4 = 4 };
  enum { CHANNEL5 = 5 };
  enum { CHANNEL6 = 6 };
  enum { CHANNEL7 = 7 };
  enum { CHANNEL8 = 8 };
  enum { DGPS = 16 };

  typedef boost::shared_ptr< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NavDGPS_SV
typedef  ::ublox_msgs::NavDGPS_SV_<std::allocator<void> > NavDGPS_SV;

typedef boost::shared_ptr< ::ublox_msgs::NavDGPS_SV> NavDGPS_SVPtr;
typedef boost::shared_ptr< ::ublox_msgs::NavDGPS_SV const> NavDGPS_SVConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> > {
  static const char* value() 
  {
    return "68b7faf0392ad4a362842f0abbad57cb";
  }

  static const char* value(const  ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x68b7faf0392ad4a3ULL;
  static const uint64_t static_value2 = 0x62842f0abbad57cbULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ublox_msgs/NavDGPS_SV";
  }

  static const char* value(const  ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# see message NavDGPS\n\
\n\
uint8 svid              # Satellite ID\n\
\n\
uint8 flags             # Bitmask / Channel Number\n\
uint8 CHANNEL1 = 1\n\
uint8 CHANNEL2 = 2\n\
uint8 CHANNEL3 = 3\n\
uint8 CHANNEL4 = 4\n\
uint8 CHANNEL5 = 5\n\
uint8 CHANNEL6 = 6\n\
uint8 CHANNEL7 = 7\n\
uint8 CHANNEL8 = 8\n\
uint8 DGPS = 16\n\
\n\
uint16 ageC             # Age of latest correction data [ms]\n\
float32 prc             # Pseudo Range Correction [m]\n\
float32 prrc            # Pseudo Range Rate Correction [m/s]\n\
\n\
\n\
";
  }

  static const char* value(const  ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.svid);
    stream.next(m.flags);
    stream.next(m.ageC);
    stream.next(m.prc);
    stream.next(m.prrc);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NavDGPS_SV_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ublox_msgs::NavDGPS_SV_<ContainerAllocator> & v) 
  {
    s << indent << "svid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.svid);
    s << indent << "flags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flags);
    s << indent << "ageC: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ageC);
    s << indent << "prc: ";
    Printer<float>::stream(s, indent + "  ", v.prc);
    s << indent << "prrc: ";
    Printer<float>::stream(s, indent + "  ", v.prrc);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_NAVDGPS_SV_H

