/* Auto-generated by genmsg_cpp for file /home/danpierce/devel/ublox_test_ws/src/ublox/ublox_msgs/msg/RxmSFRB.msg */
#ifndef UBLOX_MSGS_MESSAGE_RXMSFRB_H
#define UBLOX_MSGS_MESSAGE_RXMSFRB_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ublox_msgs
{
template <class ContainerAllocator>
struct RxmSFRB_ {
  typedef RxmSFRB_<ContainerAllocator> Type;

  RxmSFRB_()
  : chn(0)
  , svid(0)
  , dwrd()
  {
    dwrd.assign(0);
  }

  RxmSFRB_(const ContainerAllocator& _alloc)
  : chn(0)
  , svid(0)
  , dwrd()
  {
    dwrd.assign(0);
  }

  typedef uint8_t _chn_type;
  uint8_t chn;

  typedef uint8_t _svid_type;
  uint8_t svid;

  typedef boost::array<uint32_t, 10>  _dwrd_type;
  boost::array<uint32_t, 10>  dwrd;

  enum { CLASS_ID = 2 };
  enum { MESSAGE_ID = 17 };

  typedef boost::shared_ptr< ::ublox_msgs::RxmSFRB_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::RxmSFRB_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RxmSFRB
typedef  ::ublox_msgs::RxmSFRB_<std::allocator<void> > RxmSFRB;

typedef boost::shared_ptr< ::ublox_msgs::RxmSFRB> RxmSFRBPtr;
typedef boost::shared_ptr< ::ublox_msgs::RxmSFRB const> RxmSFRBConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ublox_msgs::RxmSFRB_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ublox_msgs::RxmSFRB_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::RxmSFRB_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::RxmSFRB_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::RxmSFRB_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eec72635c768d0528138f40de7442203";
  }

  static const char* value(const  ::ublox_msgs::RxmSFRB_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeec72635c768d052ULL;
  static const uint64_t static_value2 = 0x8138f40de7442203ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::RxmSFRB_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ublox_msgs/RxmSFRB";
  }

  static const char* value(const  ::ublox_msgs::RxmSFRB_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::RxmSFRB_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# RXM-SFRB (0x02 0x11)\n\
# Subframe Buffer\n\
#\n\
# The content of one single subframe buffer\n\
# For GPS satellites, the 10 dwrd values contain the parity checked subframe data for 10\n\
# Words. Each dwrd has 24 Bits with valid data (Bits 23 to 0). The remaining 8 bits (31 to 24)\n\
# have an undefined value. The direction within the Word is that the higher order bits are\n\
# received from the SV first. Example: The Preamble can be found in dwrd[0], at bit position\n\
# 23 down to 16. For more details on the data format please refer to the ICD-GPS-200C\n\
# Interface document.\n\
# For SBAS satellites, the 250 Bit message block can be found in dwrd[0] to dwrd[6] for the\n\
# first 224 bits. The remaining 26 bits are in dwrd[7], whereas Bits 25 and 24 are the last two\n\
# data bits, and Bits 23 down to 0 are the parity bits. For more information on SBAS data\n\
# format, please refer to RTCA/DO-229C (MOPS), Appendix A.\n\
#\n\
\n\
uint8 CLASS_ID = 2\n\
uint8 MESSAGE_ID = 17\n\
\n\
uint8 chn               # Channel Number\n\
uint8 svid              # ID of Satellite transmitting Subframe\n\
uint32[10] dwrd         # Words of Data\n\
\n\
";
  }

  static const char* value(const  ::ublox_msgs::RxmSFRB_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ublox_msgs::RxmSFRB_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ublox_msgs::RxmSFRB_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.chn);
    stream.next(m.svid);
    stream.next(m.dwrd);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RxmSFRB_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::RxmSFRB_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ublox_msgs::RxmSFRB_<ContainerAllocator> & v) 
  {
    s << indent << "chn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.chn);
    s << indent << "svid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.svid);
    s << indent << "dwrd[]" << std::endl;
    for (size_t i = 0; i < v.dwrd.size(); ++i)
    {
      s << indent << "  dwrd[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.dwrd[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_RXMSFRB_H

