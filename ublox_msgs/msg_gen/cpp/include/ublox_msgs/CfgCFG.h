/* Auto-generated by genmsg_cpp for file /home/danpierce/devel/ublox_test_ws/src/ublox/ublox_msgs/msg/CfgCFG.msg */
#ifndef UBLOX_MSGS_MESSAGE_CFGCFG_H
#define UBLOX_MSGS_MESSAGE_CFGCFG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ublox_msgs
{
template <class ContainerAllocator>
struct CfgCFG_ {
  typedef CfgCFG_<ContainerAllocator> Type;

  CfgCFG_()
  : clearMask(0)
  , saveMask(0)
  , loadMask(0)
  , deviceMask(0)
  {
  }

  CfgCFG_(const ContainerAllocator& _alloc)
  : clearMask(0)
  , saveMask(0)
  , loadMask(0)
  , deviceMask(0)
  {
  }

  typedef uint32_t _clearMask_type;
  uint32_t clearMask;

  typedef uint32_t _saveMask_type;
  uint32_t saveMask;

  typedef uint32_t _loadMask_type;
  uint32_t loadMask;

  typedef uint8_t _deviceMask_type;
  uint8_t deviceMask;

  enum { CLASS_ID = 6 };
  enum { MESSAGE_ID = 9 };
  enum { MASK_IO_PORT = 1 };
  enum { MASK_MSG_CONF = 2 };
  enum { MASK_INF_MSG = 4 };
  enum { MASK_NAV_CONF = 8 };
  enum { MASK_RXM_CONF = 16 };
  enum { MASK_RINV_CONF = 512 };
  enum { MASK_ANT_CONF = 1024 };
  enum { DEV_BBR = 1 };
  enum { DEV_FLASH = 2 };
  enum { DEV_EEPROM = 4 };
  enum { DEV_SPI_FLASH = 16 };

  typedef boost::shared_ptr< ::ublox_msgs::CfgCFG_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::CfgCFG_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CfgCFG
typedef  ::ublox_msgs::CfgCFG_<std::allocator<void> > CfgCFG;

typedef boost::shared_ptr< ::ublox_msgs::CfgCFG> CfgCFGPtr;
typedef boost::shared_ptr< ::ublox_msgs::CfgCFG const> CfgCFGConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ublox_msgs::CfgCFG_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ublox_msgs::CfgCFG_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::CfgCFG_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ublox_msgs::CfgCFG_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::CfgCFG_<ContainerAllocator> > {
  static const char* value() 
  {
    return "13fb5dc245f45e15f71ae45386c6e5b8";
  }

  static const char* value(const  ::ublox_msgs::CfgCFG_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x13fb5dc245f45e15ULL;
  static const uint64_t static_value2 = 0xf71ae45386c6e5b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::CfgCFG_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ublox_msgs/CfgCFG";
  }

  static const char* value(const  ::ublox_msgs::CfgCFG_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::CfgCFG_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# CFG-CFG (0x06 0x09)\n\
# Antenna Control Settings\n\
#\n\
\n\
uint8 CLASS_ID = 6\n\
uint8 MESSAGE_ID = 9\n\
\n\
uint32 clearMask          # Mask with configuration sub-sections to Clear\n\
                          # (=Load Default Configurations to Permanent\n\
                          # Configurations in non-volatile memory)\n\
uint32 saveMask           # Mask with configuration sub-section to Save\n\
                          # (=Save Current Configuration to Non-volatile\n\
                          # Memory)\n\
uint32 loadMask           # Mask with configuration sub-sections to Load\n\
                          # (=Load Permanent Configurations from\n\
                          # Non-volatile Memory to Current Configurations)\n\
\n\
uint32 MASK_IO_PORT = 1       # Port Settings\n\
uint32 MASK_MSG_CONF = 2      # Message Configuration\n\
uint32 MASK_INF_MSG = 4       # INF Message Configuration\n\
uint32 MASK_NAV_CONF = 8      # Navigation Configuration\n\
uint32 MASK_RXM_CONF = 16     # Receiver Manager Configuration\n\
uint32 MASK_RINV_CONF = 512   # Remote Inventory Configuration\n\
uint32 MASK_ANT_CONF = 1024   # Antenna Configuration\n\
\n\
uint8 deviceMask          # Mask which selects the devices for this command\n\
uint8 DEV_BBR = 1             # device battery backed RAM\n\
uint8 DEV_FLASH = 2           # device Flash\n\
uint8 DEV_EEPROM = 4          # device EEPROM\n\
uint8 DEV_SPI_FLASH = 16      # device SPI Flash\n\
\n\
";
  }

  static const char* value(const  ::ublox_msgs::CfgCFG_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ublox_msgs::CfgCFG_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ublox_msgs::CfgCFG_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.clearMask);
    stream.next(m.saveMask);
    stream.next(m.loadMask);
    stream.next(m.deviceMask);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CfgCFG_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::CfgCFG_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ublox_msgs::CfgCFG_<ContainerAllocator> & v) 
  {
    s << indent << "clearMask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.clearMask);
    s << indent << "saveMask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.saveMask);
    s << indent << "loadMask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.loadMask);
    s << indent << "deviceMask: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.deviceMask);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_CFGCFG_H

